name: Regenerate SDKs

on:
  workflow_call:
    inputs:
      konfig_yaml_dir:
        description: 'Path to directory which contains konfig.yaml'
        type: string
        required: true
        default: '.'
      env:
        description: 'Environment variables required to run tests.
          Formatted as space-deliniated key-value pairs, e.g. "ENV_VAR1=123 ENV_VAR2=456"'
        type: string
        required: true
        default: ''

jobs:
  # Fixes and lints OAS. If linter passes, regenerates SDKs, creates changeset, and pushes
  regenerate-sdks:
    runs-on: ubuntu-latest
    outputs:
      sdk_submodule_dirs: ${{ steps.sdk-submodule-dirs.outputs.dirs }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install konfig
      run: npm install -g konfig-cli

    - name: Fix OAS
      run: konfig fix --ci
      working-directory: ${{ inputs.konfig_yaml_dir }}

    - name: Lint OAS
      # This exits with code 1 if linting fails, thus terminating the workflow if the OAS does not pass linting
      run: konfig lint
      working-directory: ${{ inputs.konfig_yaml_dir }}

    - name: Regenerate SDKs
      run: konfig generate
      working-directory: ${{ inputs.konfig_yaml_dir }}

    - name: Create changeset file
      run: konfig changeset -a -m "Regenerate SDKs"
      working-directory: ${{ inputs.konfig_yaml_dir }}

    - name: Set git config
      run: |
        git config --global user.email "publisher@konfigthis.com"
        git config --global user.name "konfig-publisher"

    - name: Get SDK submodule directories
      id: sdk-submodule-dirs
      run: echo "dirs=$(konfig list-sdk-submodules | tr '\n' ' ')" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.konfig_yaml_dir }}

    - name: Set up SSH key for submodule access
      if: steps.sdk-submodule-dirs.outputs.dirs != ''
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: |
          ${{ secrets.SUBMODULE_DEPLOY_KEY_PYTHON }}
          ${{ secrets.SUBMODULE_DEPLOY_KEY_TYPESCRIPT }}
          ${{ secrets.SUBMODULE_DEPLOY_KEY_JAVA }}

    # For each submodule, if it is an SDK directory, then commit and push. Open a PR if one does not exist yet
    - name: Commit and push (submodules)
      working-directory: ${{ inputs.konfig_yaml_dir }}
      if: steps.sdk-submodule-dirs.outputs.dirs != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KONFIG_API_KEY: ${{ secrets.KONFIG_API_KEY }}
      run: |
        git submodule foreach '
          if [ -n "$(echo "${{ steps.sdk-submodule-dirs.outputs.dirs }}" | grep "$displaypath ")" ]; then
            git add -A
            git commit -m "Regenerate SDKs"
            git push origin HEAD:refs/heads/${{ github.head_ref }}
            # git remote url looks like this: git@key-abcd.github.com:owner/repo.git
            owner=$(git remote get-url origin | cut -d '/' -f 1 | cut -d ':' -f 2)
            repo=$(git remote get-url origin | cut -d '/' -f 2 | sed 's/\.git.*//')
            konfig pr-create \
              --head ${{ github.head_ref }} \
              --base ${{ github.base_ref }} \
              --owner $owner \
              --repo $repo \
              --title "Regenerate SDKs" \
              --body "Regenerate SDKs"
          fi
        '

    - name: Commit and push (top-level repo)
      run: |
        git add -A
        git commit -m "Regenerate SDKs"
        git push origin HEAD:${{ github.head_ref }}

  # Runs konfig test in docker container
  test:
    runs-on: ubuntu-latest
    needs: regenerate-sdks
    container:
      image: konfigdev/test-and-publish:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install konfig
      run: npm install -g konfig-cli

    - name: Set env vars for test
      run: |
        for var in ${{ inputs.env }}; do
          echo $var >> $GITHUB_ENV
        done

    - name: Run tests
      run: konfig test
      working-directory: ${{ inputs.konfig_yaml_dir }}

  # If tests pass, merge the PR.
  # If applicable, this will first merge the PRs in the SDK submodules
  merge:
    runs-on: ubuntu-latest
    needs: [test, regenerate-sdks]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install konfig
      run: npm install -g konfig-cli

    - name: Set git config
      run: |
        git config --global user.email "publisher@konfigthis.com"
        git config --global user.name "konfig-publisher"

    - name: Merge submodule PRs
      if: needs.regenerate-sdks.outputs.sdk_submodule_dirs != ''
      working-directory: ${{ inputs.konfig_yaml_dir }}
      env:
        KONFIG_API_KEY: ${{ secrets.KONFIG_API_KEY }}
      run: |
        git submodule foreach '
          if [ -n "$(echo "${{ needs.regenerate-sdks.outputs.sdk_submodule_dirs }}" | grep "$displaypath ")" ]; then
            echo Merging PR in SDK submodule at path: $name
            # git remote url looks like this: https://github.com/owner/repo.git
            owner=$(git remote get-url origin | cut -d '/' -f 4)
            repo=$(git remote get-url origin | cut -d '/' -f 5 | sed 's/\.git.*//')
            konfig pr-merge --owner $owner --repo $repo --head ${{ github.head_ref }} --base ${{ github.base_ref }}
          fi
        '

    - name: Update submodule references
      if: needs.regenerate-sdks.outputs.sdk_submodule_dirs != ''
      working-directory: ${{ inputs.konfig_yaml_dir }}
      run: |
        git submodule foreach '
          if [ -n "$(echo "${{ needs.regenerate-sdks.outputs.sdk_submodule_dirs }}" | grep "$displaypath ")" ]; then
            git fetch origin ${{ github.base_ref }}
            git checkout FETCH_HEAD
          fi
        '
        git add -A
        git commit -m "Update submodule references"
        git push origin HEAD:${{ github.head_ref }}

    - name: Merge top-level PR
      env:
        KONFIG_API_KEY: ${{ secrets.KONFIG_API_KEY }}
      run: |
        repo=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
        konfig pr-merge \
          --head ${{ github.head_ref }} \
          --base ${{ github.base_ref }} \
          --owner ${{ github.repository_owner }} \
          --repo $repo
